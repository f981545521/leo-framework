<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>leo-crawler</contextName>
    <!-- 定义日志的根目录 项目所在盘符的根目录下, 也可以指定具体盘符位置, 如：E:\\logs -->
    <property name="rootPath" value="E:\\logs"/>
    <!-- 定义日志文件名称 -->
    <property name="fileName" value="leo-crawler"/>

    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- 自定义输出模式 -->
    <!--
        %d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度
        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符
    -->
    <property name="log.pattern" value="%d{HH:mm:ss.SSS} [%thread] %-5level %logger{20} - [%method,%line] - %msg%n"/>
    <property name="log.pattern2"
              value="[%date{yyyy-MM-dd HH:mm:ss.SSS}] %level %X{thread} %logger{36}:%line -> %msg%n"/>
    <property name="log.pattern.console"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS}  %clr(${LOG_LEVEL_PATTERN:-%5level}) %clr([%15.15thread]){faint} -%X{leoTraceNo}- %clr(%-48.48logger,%5line{47}){cyan} %clr(:){blue} %msg%n"/>
    <property name="log.pattern.file"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} -%5level [%15.15thread] -%X{leoTraceNo}- %-48.48logger,%5line{47} : %msg%n"/>

    <!-- 控制台日志打印 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
    </appender>

    <!-- 分环境日志等级：开发、测试 -->
    <springProfile name="dev,test,pre,test001,beta,netapp">
        <root>
            <level value="debug"/>
            <appender-ref ref="console"/>
        </root>
    </springProfile>

    <!-- 分环境日志等级：生产 -->
    <springProfile name="prod">
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
        <appender name="file_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 指定日志文件的名称 -->
            <file>${rootPath}/${fileName}.log</file>
            <append>true</append>
            <prudent>false</prudent>
            <!-- 日志文件Rolling策略 -->
            <!--
            当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
            TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
            -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!--
                  滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
                  %i：当文件大小超过maxFileSize时，按照i进行文件滚动
                  -->
                <fileNamePattern>${rootPath}/${fileName}.%d{yyyy-MM-dd}%i.log</fileNamePattern>
                <!-- 日志保留天数 -->
                <maxHistory>30</maxHistory>
                <!--
                    当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
                    -->
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>50MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
            </rollingPolicy>
            <encoder>
                <pattern>${log.pattern2}</pattern>
                <charset>UTF-8</charset>
            </encoder>
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>
        <!-- 把日志异步输出到磁盘文件中，避免每次都进行磁盘IO操作 -->
        <appender name="file_log_async" class="ch.qos.logback.classic.AsyncAppender">
            <discardingThreshold>0</discardingThreshold>
            <queueSize>500</queueSize>
            <appender-ref ref="file_log" />
        </appender>
        <root>
            <level value="debug"/>
            <appender-ref ref="console"/>
            <appender-ref ref="file_log"/>
        </root>
    </springProfile>

    <!-- 配置框架的过滤级别 -->
    <logger name="springfox" level="INFO"/>
    <logger name="org.thymeleaf" level="INFO"/>
    <logger name="org.apache.http" level="INFO"/>
    <logger name="io.lettuce.core.protocol" level="INFO"/>
    <logger name="com.zaxxer.hikari" level="INFO"/>
    <logger name="org.springframework" level="INFO"/>
    <logger name="io.lettuce.core" level="INFO"/>
    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>

</configuration>